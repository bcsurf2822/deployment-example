services:
  # Frontend service using the existing Dockerfile
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        - NEXT_PUBLIC_PYDANTIC_AGENT_API_URL=${NEXT_PUBLIC_PYDANTIC_AGENT_API_URL}
        - NEXT_PUBLIC_ENABLE_STREAMING=${NEXT_PUBLIC_ENABLE_STREAMING}
    environment:
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_PYDANTIC_AGENT_API_URL=${NEXT_PUBLIC_PYDANTIC_AGENT_API_URL}
      - PYDANTIC_AGENT_API_URL=http://agent-api:8001/api/pydantic-agent
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_ENABLE_STREAMING=${NEXT_PUBLIC_ENABLE_STREAMING}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SUPABASE_CALLBACK_URL=${SUPABASE_CALLBACK_URL}
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      agent-api:
        condition: service_healthy

  # Agent API service using the simple Dockerfile (without MCP complexity)
  agent-api:
    build:
      context: ./agent_api
      dockerfile: Dockerfile.simple
    ports:
      - "8001:8001" # FastAPI service
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - VISION_MODEL=${VISION_MODEL}
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - BRAVE_SEARCH_URL=${BRAVE_SEARCH_URL}
      - SEARXNG_BASE_URL=${SEARXNG_BASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - MEM0_API_KEY=${MEM0_API_KEY}
      - DEBUG_MODE=${DEBUG_MODE:-true}
      - PYTHONPATH=/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      # Mount for persistent data if needed
      - agent_data:/app/data

  # Agent API service using the simple Dockerfile (without MCP complexity)
  agent-api-simple:
    build:
      context: ./agent_api
      dockerfile: Dockerfile.simple
    ports:
      - "8002:8001" # Different port to avoid conflicts
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - VISION_MODEL=${VISION_MODEL}
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - BRAVE_SEARCH_URL=${BRAVE_SEARCH_URL}
      - SEARXNG_BASE_URL=${SEARXNG_BASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - MEM0_API_KEY=${MEM0_API_KEY}
      - DEBUG_MODE=${DEBUG_MODE:-true}
      - PYTHONPATH=/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - agent_data_simple:/app/data
    profiles:
      - simple # This service only runs when 'simple' profile is specified

  # Google Drive RAG Pipeline service
  rag-google-drive:
    build:
      context: ./rag_pipeline
      dockerfile: Dockerfile
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - GOOGLE_DRIVE_CREDENTIALS_JSON=${GOOGLE_DRIVE_CREDENTIALS_JSON}
      - RAG_WATCH_FOLDER_ID=${RAG_WATCH_FOLDER_ID}
      - RUN_MODE=${RUN_MODE}
      - RAG_PIPELINE_ID=google-drive-pipeline
      - RAG_SERVICE=google_drive
      - DEBUG_MODE=${DEBUG_MODE:-true}
    volumes:
      - ./test_files:/app/test_files
    restart: unless-stopped
    profiles:
      - with-rag

  # Local Files RAG Pipeline service
  rag-local-files:
    build:
      context: ./rag_pipeline
      dockerfile: Dockerfile
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - RAG_WATCH_DIRECTORY=/app/Local_Files/data
      - RUN_MODE=${RUN_MODE}
      - RAG_PIPELINE_ID=local-files-pipeline
      - RAG_SERVICE=local_files
      - DEBUG_MODE=${DEBUG_MODE:-true}
    volumes:
      - ./test_files:/app/test_files
      - ${RAG_LOCAL_DIRECTORY:-./test_files}:/app/Local_Files/data
    restart: unless-stopped
    profiles:
      - with-rag

volumes:
  agent_data:
  agent_data_simple:

networks:
  default:
    driver: bridge
