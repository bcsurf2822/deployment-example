version: '3.8'

services:
  # Frontend service for production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_PYDANTIC_AGENT_API_URL=${NEXT_PUBLIC_PYDANTIC_AGENT_API_URL}
      - PYDANTIC_AGENT_API_URL=http://agent-api:8001/api/pydantic-agent
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_ENABLE_STREAMING=${NEXT_PUBLIC_ENABLE_STREAMING}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SUPABASE_CALLBACK_URL=${SUPABASE_CALLBACK_URL}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      - agent-api
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Agent API service for production
  agent-api:
    build:
      context: ./agent_api
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - VISION_MODEL=${VISION_MODEL}
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - BRAVE_SEARCH_URL=${BRAVE_SEARCH_URL}
      - SEARXNG_BASE_URL=${SEARXNG_BASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - MEM0_API_KEY=${MEM0_API_KEY}
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - PYTHONPATH=/app
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Google Drive RAG Pipeline service
  rag-google-drive:
    build:
      context: ./rag_pipeline
      dockerfile: Dockerfile
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - GOOGLE_DRIVE_CREDENTIALS_JSON=${GOOGLE_DRIVE_CREDENTIALS_JSON}
      - RAG_WATCH_FOLDER_ID=${RAG_WATCH_FOLDER_ID}
      - RUN_MODE=${RUN_MODE}
      - RAG_PIPELINE_ID=google-drive-pipeline
      - RAG_SERVICE=google_drive
      - DEBUG_MODE=${DEBUG_MODE:-false}
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - with-rag

  # Local Files RAG Pipeline service  
  rag-local-files:
    build:
      context: ./rag_pipeline
      dockerfile: Dockerfile
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - RAG_WATCH_DIRECTORY=/app/Local_Files/data
      - RUN_MODE=${RUN_MODE}
      - RAG_PIPELINE_ID=local-files-pipeline
      - RAG_SERVICE=local_files
      - DEBUG_MODE=${DEBUG_MODE:-false}
    volumes:
      - ${RAG_LOCAL_DIRECTORY:-./rag-documents}:/app/Local_Files/data
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - with-rag

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    profiles:
      - with-redis

  # PostgreSQL database (if not using external Supabase)
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-agents_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-agents_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    profiles:
      - with-db

volumes:
  redis_data:
  postgres_data:

networks:
  default:
    driver: bridge